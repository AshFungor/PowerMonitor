from typing import Union, Optional, Tuple
from datetime import datetime
from utils.database_api.models import User, Complex, Telemetry


class Database:
    def __init__(self, dbname: str, user: str, password: str, host: str) -> None:
        self.name = dbname
        self.user = user
        self.password = password
        self.host = host
    @property
    def connection(self): ...
    def execute(self, sql: str, parameters: Optional[Union[tuple, dict, list]] = None, fetchone: bool = False,
                fetchall: bool = False, commit: bool = False) -> Optional[tuple]: ...
    def _create_table_users(self) -> None: ...
    def _create_table_complexes(self) -> None: ...
    def _create_table_telemetry(self) -> None: ...
    def initiate(self) -> None: ...
    def add_user(self, user: User) -> None: ...
    def add_telemetry(self, telemetry: Telemetry) -> None: ...
    def add_complex(self, complex: Complex) -> None: ...
    def select_user_by_login(self, login: str) -> Tuple[int, str, str, str]: ...
    def select_all_users(self) -> tuple: ...
    def select_all_telemetry(self) -> tuple: ...
    def select_telemetry_by_date(self, start: datetime, end: datetime): ...
